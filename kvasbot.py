import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ChatMember
import sqlite3
from datetime import datetime, timedelta
#from background import keep_alive_live
import pytz
import time
import random
import asyncio
import re
import progress.bar as pb
from colorama import init, Style, Fore

bar = pb.ShadyBar("–ó–∞–≥—Ä—É–∑–∫–∞", max=100)
for i in range(100):
   bar.next()
   time.sleep(0.01)
bar.finish()
init()
print(Fore.GREEN + "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

bot = Bot(token="YourToken")
dp = Dispatcher(bot)

conn = sqlite3.connect('testing2.db')
cursor = conn.cursor()

#cursor.execute("""ALTER TABLE user_data
#ADD COLUMN kamnojby VARCHAR(100)
#""")
#conn.commit()

cursor.execute("""CREATE TABLE IF NOT EXISTS user_data(
first_name VARCHAR(50),
last_name VARCHAR(50),
user_name VARCHAR(50),
custom_name VARCHAR(50),
user_id INTEGER PRIMARY KEY,
date_exit FLOAT,
active INTEGER,
mir_poyas VARCHAR(20),
timer INTEGER,
kvas_up FLOAT,
online_up FLOAT,
num_one INTEGER,
num_two INTEGER,
num_tree INTEGER,
num_four INTEGER,
num_five INTEGER,
num_six INTEGER,
num_seven INTEGER,
hoursmine INTEGER,
minutemine INTEGER,
secondmine INTEGER,
cabimet TEXT,
stavka1 FLOAT,
time_os VARCHAR(20),
kamnojby VARCHAR(100)
)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS chat_id(
id INTEGER PRIMARY KEY,
chat TEXT
)""")
conn.commit()

timers = {}
status = [""]
chaty = []

#–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞----------

UA_kiev_tz = pytz.timezone('Europe/Kiev')
RU_moscow_tz = pytz.timezone('Europe/Moscow')
KZ_almaty_tz = pytz.timezone('Asia/Almaty')

#–ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞------------

list_info = ["–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", "–í –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —á—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–¥", "–º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç '–ø—Ä–æ–º–æ #–Ω–æ–≤—ã–π_–∫–≤–∞—Å_–Ω–∞_—á–∞—Å' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è", "–ù–∞–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ 100 –ª–∏—Ç—Ä —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Ç–æ–ø—ã", "–≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 1', –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏—Ö –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 0, –ª–∏–±–æ –∂–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–∫—É –±–æ—Ç–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 1'/'—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 0'", "–ø–æ—Å—Ç–∞–≤—å—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞ –≤–∞—à —Ä–µ–≥–∏–æ–Ω, –≤—Å–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç UA_kiev/RU_moscow/KZ_almaty, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –≤ –∫–æ–º–∞–Ω–¥–µ /help", "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ —Å–∏–ª—å–Ω–æ —Ä–∏—Å–∫–æ–≤–∞—Ç—å –≤ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö, –≤–æ–æ–±—â–µ –µ—Å–ª–∏ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ —Å –∫–∞–∫–æ–≥–æ —Ç–æ —Ä–∞–∑–∞ —Ç–æ –ª—É—á—à–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–µ–¥—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –±—É–¥—É—Ç –Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω—ã–º–∏", "–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –µ—â—ë –±–æ–ª—å—à–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤  —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ", "–°–ø–∞—Å–∏–±–æ @FJHGGP –∑–∞ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∞–≤—É"]

async def check_db(message: types.Message):
   conn = sqlite3.connect('testing2.db')
   cursor = conn.cursor()
   id = message.from_user.id
   firstname = message.from_user.first_name
   lastname = message.from_user.last_name
   username = message.from_user.username
   chat_id = message.chat.id
      
   cursor.execute("SELECT * FROM user_data WHERE user_id = ?", (id,))
   data = cursor.fetchone()
   if data is None:
      cursor.execute("INSERT INTO user_data (first_name, last_name, user_name, custom_name, user_id, date_exit, active, mir_poyas, timer, kvas_up, online_up, num_one, num_two, num_tree, num_four, num_five, num_six, num_seven, hoursmine, minutemine, secondmine, cabimet, stavka1, time_os, kamnojby) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (firstname, lastname, username, "empty", id, 0, 1, "Df", 0, 0, 0, 0, 0, 0, 0, 0, chat_id, 0, 1, 0, 0, "None", 0, "None", "None"))
      conn.commit()
   else:
      if data[6] == 1:
         pass
      elif data[6] == 0:
         activn = 1
         cursor.execute("UPDATE user_data SET active = ? WHERE user_id = ?", (activn, id))
         conn.commit()
   if data:
      if data[7] == "Df":
         markup = types.InlineKeyboardMarkup(row_width=1)
         markup.add(types.InlineKeyboardButton(text="–ö–≤–∞—Å–æ–º–µ—Ç—Ä", url="https://t.me/Kvaso_metrbot"))
         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å!–ò–Ω–∞—á–µ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.", reply_markup=markup)
      else:
         pass
   conn = sqlite3.connect('testing2.db')
   cursor = conn.cursor()
   cursor.execute("SELECT chat FROM chat_id WHERE id = ?", (0,))
   data_chat = cursor.fetchone()
   if message.chat.type == "group" or message.chat.type == "supergroup":
      if data_chat is None:
         cursor.execute("INSERT INTO chat_id (id, chat) VALUES (?, ?)", (0, chat_id))
         conn.commit()
      else:
         pass
      if data:
         if str(data[16]).startswith("-"):
            if str(data[16]) not in str(data_chat[0]):
               if data_chat[0]:
                  my_string = f"{data[16]}"
                  my_chat = [data_chat[0], my_string]
                  cursor.execute("UPDATE chat_id SET chat = ? WHERE id = ?", (f", ".join(my_chat), 0))
                  conn.commit()
               else:
                  my_chat = [data[16]]
                  cursor.execute("UPDATE chat_id SET chat = ? WHERE id = ?", (f", ".join(my_chat), 0))
                  conn.commit()
            else:
               pass
   if data:
      if data[0] != message.from_user.first_name:
         cursor.execute("UPDATE user_data SET first_name = ? WHERE user_id = ?", (message.from_user.first_name, id))
         conn.commit()
      else:
         pass
      if data[1] != message.from_user.last_name:
         cursor.execute("UPDATE user_data SET last_name = ? WHERE user_id = ?", (message.from_user.last_name, id))
         conn.commit()
      else:
         pass
      if data[2] != message.from_user.username:
         cursor.execute("UPDATE user_data SET first_name = ? WHERE user_id = ?", (message.from_user.username, id))
         conn.commit()
      else:
         pass

@dp.message_handler(commands=["drop", "droptable"])
async def dropping(message: types.Message):
   await message.answer("hi")
   conn = sqlite3.connect('testing2.db')
   cursor = conn.cursor()
   cursor.execute("DELETE FROM user_data")
#   cursor.execute("DELETE FROM chat_id")
   conn.commit()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
   if message.chat.type == "private":
      await check_db(message)
      await bot.send_sticker(message.from_user.id, random.choice(["CAACAgIAAxkBAAEKVpplCgbYDHiL5mmGfBnEdP-dEG00hQACPxUAApRF2UvlLdme07UyVzAE", "CAACAgQAAxkBAAEKVqBlCgiLKubaxw7oJqyQkHHGlmh-LgACdAsAApMNuFMOGzz8EcFY_jAE"]))
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è", url="https://t.me/Kvaso_metrbot?startgroup=invite"))
      await message.answer("–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –º–µ–Ω—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è'", reply_markup=markup)
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      markup.add('üçª–í—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞')
      markup.add('üìà–¢–æ–ø', 'üß∞–ü–æ–º–æ—â—å', '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üéÆ–ò–≥—Ä—ã', "üìù–°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ")
      if message.chat.id == 1017848661:
         markup.add('‚å®Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
      await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ /help", reply_markup=markup)
   elif message.chat.type == "channel":
      await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –∫–∞–Ω–∞–ª–µ –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º...")
      await check_db(message)
   elif message.chat.type == "supergroup" or message.chat.type == "group":
         markup = types.InlineKeyboardMarkup(row_width=1)
         markup.add(types.InlineKeyboardButton(text="–ö–≤–∞—Å–æ–º–µ—Ç—Ä", url="https://t.me/Kvaso_metrbot"))
         await message.answer("–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /help", reply_markup=markup)

@dp.message_handler(commands=['help'])
async def start(message: types.Message):
   if message.chat.type == "private":
         await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üß∞–ü–æ–º–æ—â—å'")
   elif message.chat.type == "channel":
      await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –∫–∞–Ω–∞–ª–µ –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º...")
      await check_db(message)
   elif message.chat.type == "supergroup" or "group":
      await check_db(message)
      markup = types.InlineKeyboardMarkup(row_width=1)
      markup.add(types.InlineKeyboardButton("–∑–∞—á–µ–º –Ω—É–∂–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?", callback_data="mir_poyasq"))
      await message.answer("–¢—É—Ç —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è...\n\n/help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π\n/kvas_up - –≤—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞\n/top_in_group - —Ç–æ–ø –ª–∏—Ç—Ä–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ \n/top - —Ç–æ–ø –≤—Å–µ—Ö –ª—é–¥–µ–π –Ω–∞—á–∏–Ω–∞—è —Å 100–ª.\n", reply_markup=markup)

@dp.message_handler(commands=['kvas_up'])
async def kvasingup (message: types.Message):
   if message.chat.type == "group" or "supergroup":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      id = message.from_user.id
      cursor.execute("SELECT active, mir_poyas, kvas_up, timer, hoursmine, minutemine, secondmine, num_two, time_os FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      await check_db(message)
      if id not in timers:
         randoms = round(random.uniform(0.01, 5.00), 2)
         kvas_up = data[2] + randoms
         ranwor = random.choice(list_info)
         cursor.execute("UPDATE user_data SET kvas_up = ? WHERE user_id = ?", (kvas_up, id))
         conn.commit()
         istimer = 1
         cursor.execute("UPDATE user_data SET timer = ? WHERE user_id = ?", (istimer, id))
         conn.commit()
         timers[id] = True
         if data[1] == "UA_kiev":
            ua_now = datetime.now(UA_kiev_tz).time()
            delta = timedelta(hours=1)
            new_ua_time = (datetime.combine(datetime.min, ua_now) + delta).time()
            new_ua_nsw = new_ua_time.strftime("%H:%M:%S")
            cursor.execute("UPDATE user_data SET time_os = ? WHERE user_id = ?", (new_ua_nsw, id))
            conn.commit()
         elif data[1] == "RU_moscow":
            ru_now = datetime.now(RU_moscow_tz)
            ru_time = ru_now.time()
            delta = timedelta(hours=1)
            new_ru_time = (datetime.combine(datetime.min, ru_time) + delta).time()
            new_ru_nsw = new_ru_time.strftime("%H:%M:%S")
            cursor.execute("UPDATE user_data SET time_os = ? WHERE user_id = ?", (new_ru_nsw, id))
            conn.commit()
         elif data[1] == "KZ_almaty":
             kz_now = datetime.now(KZ_almaty_tz)
             kz_time = kz_now.time()
             delta = timedelta(hours=1)
             new_kz_time = (datetime.combine(datetime.min, kz_time) + delta).time()
             new_kz_nsw = new_kz_time.strftime("%H:%M:%S")
             cursor.execute("UPDATE user_data SET time_os = ? WHERE user_id = ?", (new_kz_nsw, id))
             conn.commit()
         else:
            current_time_seconds = time.time()
            current_time_struct = time.localtime(current_time_seconds)
            real_time = [current_time_struct.tm_hour, current_time_struct.tm_min, current_time_struct.tm_sec]
            real_btime = real_time[0] + 1
            timing_is = f"{real_time[0]}:{real_time[1]}:{real_btime}"
            cursor.execute("UPDATE user_data SET time_os = ? WHERE user_id = ?", (timing_is, id))
            conn.commit()
         if data[1] == "UA_kiev":
            await message.reply(f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–ø–∏–ª(–∞) <b>{randoms}–ª</b>\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ " + str(new_ua_nsw) + f"\n\n<i>—Å–æ–≤–µ—Ç—ã:</i> {ranwor}", parse_mode="html", disable_web_page_preview=True)
            await asyncio.sleep(3600)
            del timers[id]
            if data[7] == 0:
               await message.answer(f"@{message.from_user.username} –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É")
         elif data[1] == "RU_moscow":
            await message.reply(f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–ø–∏–ª(–∞) <b>{randoms}–ª</b>\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ "+ str(new_ru_nsw) + f"\n\n<i>—Å–æ–≤–µ—Ç—ã:</i> {ranwor}", parse_mode="html", disable_web_page_preview=True)
            await asyncio.sleep(3600)
            del timers[id]
            if data[7] == 0:
               await message.answer(f"@{message.from_user.username} –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É")
         elif data[1] == "KZ_almaty":
            await message.reply(f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–ø–∏–ª(–∞) <b>{randoms}–ª</b>\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ " + str(new_kz_nsw) + f"\n\n<i>—Å–æ–≤–µ—Ç—ã:</i> {ranwor}", parse_mode="html", disable_web_page_preview=True)
            await asyncio.sleep(3600)
            del timers[id]
            if data[7] == 0:
               await message.answer(f"@{message.from_user.username} –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É")
         else:
             await message.reply(f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–ø–∏–ª(–∞) <b>{randoms}–ª</b>\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ {real_btime}:{real_time[1]}:{real_time[2]}\n\n<i>—Å–æ–≤–µ—Ç—ã:</i> {ranwor}", parse_mode="html", disable_web_page_preview=True)
             await asyncio.sleep(3600)
             del timers[id]
             if data[7] == 0:
               await message.answer(f"@{message.from_user.username} –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É")
      else:
          if data[1] == "UA_kiev":
                 time_format = "%H:%M:%S"
                 ua_now = datetime.now(UA_kiev_tz)
                 time1 = datetime.strptime(data[8], time_format)
                 ua_str = ua_now.strftime(time_format)
                 time2 = datetime.strptime(ua_str, time_format)
                 if time1 < time2:
                    time1 = time1 + timedelta(days=1)
                 time_minus = time1 - time2
                 time_str = str(time_minus)
                 await message.answer("–í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–∏—Ç—å —á–µ—Ä–µ–∑ {}".format(time_str))
          elif data[1] == "RU_moscow":
                 time_format = "%H:%M:%S"
                 ru_now = datetime.now(RU_moscow_tz)
                 time1 = datetime.strptime(data[8], time_format)
                 ru_str = ru_now.strftime(time_format)
                 time2 = datetime.strptime(ru_str, time_format)
                 if time1 < time2:
                    time1 = time1 + timedelta(days=1)
                 time_minus = time1 - time2
                 time_str = str(time_minus)
                 await message.answer("–í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–∏—Ç—å –≤ {}".format(time_str))
          elif data[1] == "KZ_almaty":
                 time_format = "%H:%M:%S"
                 kz_now = datetime.now(KZ_almaty_tz)
                 time1 = datetime.strptime(data[8], time_format)
                 kz_str = kz_now.strftime(time_format)
                 time2 = datetime.strptime(kz_str, time_format)
                 if time1 < time2:
                    time1 = time1 + timedelta(days=1)
                 time_minus = time1 - time2
                 time_str = str(time_minus)
                 await message.answer("–í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–∏—Ç—å –≤ {}".format(time_str))
          else:
                 await message.answer("–í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ {}\n\n–ü–æ—á–µ–º—É –≤—ã –≤—Å—ë –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–µ–æ–Ω?".format(data[8]))

@dp.message_handler(commands=['top'])
async def topping (message: types.Message):
   if message.chat.type == "group" or "supergroup":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      id = message.from_user.id
      first_name_0 = message.from_user.first_name
            
      cursor.execute("SELECT first_name, kvas_up FROM user_data ORDER BY kvas_up DESC")
      data = cursor.fetchall()
      await check_db(message)
      output = ""
      one_numer = 0
      for record in data:
         first_name, kvas_up = record
         kvas_up_float = float(kvas_up)
         if float(kvas_up) > 99.99:
            one_numer += 1
            if first_name == first_name_0:
               output += f"<u>{one_numer}. <b>{first_name}</b> - {round(kvas_up_float, 2)}–ª</u>\n"
            else:
               output += f"{one_numer}. <b>{first_name}</b> - {round(kvas_up_float, 2)}–ª\n"
      await message.answer(f"–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ª—é–¥–µ–π —É –∫–æ–≥–æ –±–æ–ª—å—à–µ 100–ª.\n\n{output}", parse_mode="html")
      cursor.execute("SELECT first_name, kvas_up FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      await message.answer(f"–£ –≤–∞—Å: {data[1]}–ª.")

@dp.message_handler(commands=['top_in_group'])
async def toppinggroup(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        conn = sqlite3.connect('testing2.db')
        cursor = conn.cursor()
        chat_id = message.chat.id
        first_name_0 = message.from_user.first_name
        id = message.from_user.id

        cursor.execute("SELECT first_name, kvas_up, user_id, num_six FROM user_data ORDER BY kvas_up DESC")
        data = cursor.fetchall()
        cursor.execute("UPDATE user_data SET num_six = ? WHERE user_id = ?", (chat_id, id))
        conn.commit()
        cursor.execute("SELECT first_name, kvas_up, user_id, num_six FROM user_data ORDER BY kvas_up DESC")
        data = cursor.fetchall()
        await check_db(message)
        output = ""
        one_numer = 0

        for user_data in data:
            first_name, kvas_up, user_id, num_six = user_data
            kvas_up_float = float(kvas_up)
            
            if num_six == message.chat.id:
                one_numer += 1
                if first_name == first_name_0:
                   output += f"<u>{one_numer}. <b>{first_name}</b> - {round(kvas_up_float, 2)}–ª</u>\n"
                else:
                   output += f"<b>{one_numer}. {first_name}</b> - {round(kvas_up_float, 2)}–ª\n"
        
        await message.answer(f"–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ:\n{output}", parse_mode="html")

@dp.message_handler(commands=['send'])
async def send(message: types.Message):
   if message.chat.type == "private":
       if message.from_user.id == 1017848661:
           try:
               args = message.get_args().split()
               argss = " ".join(args[1:])
               user = message.text.split()
               
               ua_naw = datetime.now(UA_kiev_tz)
               ru_naw = datetime.now(RU_moscow_tz)
               kz_naw = datetime.now(KZ_almaty_tz)
               
               ua_nsw = ua_naw.strftime("%H:%M:%S")
               ru_nsw = ru_naw.strftime("%H:%M:%S")
               kz_nsw = kz_naw.strftime("%H:%M:%S")
               
               await bot.send_message(user[1], "–í–∞–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n{}\n‚è∞Time: \nüá∫üá¶UA:{}\nüá∑üá∫RU:{}\nüáµüáºKZ:{}".format(argss, ua_nsw, ru_nsw, kz_nsw))
               
               await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")
               
           except Exception as e:
                await message.answer(f"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} —É–¥–∞–ª–∏–ª —á–∞—Ç —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π\n–û—à–∏–±–∫–∞: {e}")
       else:
            await message.answer("–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

@dp.message_handler(commands=['bonus'])
async def send(message: types.Message):
   if message.chat.type == "private":
       if message.from_user.id == 1017848661:
           try:
               conn = sqlite3.connect('testing2.db')
               cursor = conn.cursor()
               id = message.from_user.id
               
               cursor.execute("SELECT kvas_up FROM user_data")
               args = message.get_args().split()
               user = int(args[0])
               count = str(args[1:])
               count_list = ' '.join(count).strip('[]')
               my_string = count_list.replace("'", "")
               my_super = my_string.replace(" ", "")
               await message.answer(f"{my_super}")
               cursor.execute("UPDATE user_data SET kvas_up = kvas_up + ? WHERE user_id = ?", (my_super, user))
               conn.commit()
               await bot.send_message(user, "–í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –±–æ–Ω—É—Å –∑–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ –æ—à–∏–±–æ–∫")
               await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–æ–Ω—É—Å")
           except Exception as e:
               await message.answer(f"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–¥–∞–ª–∏–ª —á–∞—Ç —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π\n–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(content_types=['text'])
async def texted(message: types.Message):
   if message.text == "üçª–í—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         firstname = message.from_user.first_name
         lastname = message.from_user.last_name
         username = message.from_user.username
         chat_id = message.chat.id
         
         cursor.execute("SELECT active, mir_poyas, kvas_up, timer, hoursmine, minutemine, secondmine, num_two, time_os FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         if data[0] == 0:
               activn = 1
               cursor.execute("UPDATE user_data SET active = ? WHERE user_id = ?", (activn, id))
               conn.commit()
         else:
               pass
         if id not in timers:
                randoms = round(random.uniform(0.01, 5.00), 2)
                kvas_up = data[2] + randoms
                ranwor = random.choice(list_info)
                cursor.execute("UPDATE user_data SET kvas_up = ? WHERE user_id = ?", (kvas_up, id))
                conn.commit()
                istimer = 1
                cursor.execute("UPDATE user_data SET timer = ? WHERE user_id = ?", (istimer, id))
                conn.commit()
                timers[id] = True
                if data[1] == "UA_kiev":
                   ua_now = datetime.now(UA_kiev_tz)
                   ua_time = ua_now.time()
                   delta = timedelta(hours=1)
                   new_ua_time = (datetime.combine(datetime.min, ua_time) + delta).time()
                   new_ua_nsw = new_ua_time.strftime("%H:%M:%S")
                   cursor.execute("UPDATE user_data SET time_os = ? WHERE user_id = ?", (new_ua_nsw, id))
                   conn.commit()
                elif data[1] == "RU_moscow":
                   ru_now = datetime.now(RU_moscow_tz)
                   ru_time = ru_now.time()
                   delta = timedelta(hours=1)
                   new_ru_time = (datetime.combine(datetime.min, ru_time) + delta).time()
                   new_ru_nsw = new_ru_time.strftime("%H:%M:%S")
                   cursor.execute("UPDATE user_data SET time_os = ? WHERE user_id = ?", (new_ru_nsw, id))
                   conn.commit()
                elif data[1] == "KZ_almaty":
                   kz_now = datetime.now(KZ_almaty_tz)
                   kz_time = kz_now.time()
                   delta = timedelta(hours=1)
                   new_kz_time = (datetime.combine(datetime.min, kz_time) + delta).time()
                   new_kz_nsw = new_kz_time.strftime("%H:%M:%S")
                   cursor.execute("UPDATE user_data SET time_os = ? WHERE user_id = ?", (new_kz_nsw, id))
                   conn.commit()
                else:
                   current_time_seconds = time.time()
                   current_time_struct = time.localtime(current_time_seconds)
                   real_time = [current_time_struct.tm_hour, current_time_struct.tm_min, current_time_struct.tm_sec]
                   real_btime = real_time[0] + 1
                   timing_is = f"{real_time[0]}:{real_time[1]}:{real_btime}"
                   cursor.execute("UPDATE user_data SET time_os = ? WHERE user_id = ?", (timing_is, id))
                   conn.commit()
                if data[1] == "UA_kiev":
                   await message.reply(f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–ø–∏–ª(–∞) <b>{randoms}–ª</b>\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ " + str(new_ua_nsw) + f"\n\n<i>—Å–æ–≤–µ—Ç—ã:</i> {ranwor}", parse_mode="html", disable_web_page_preview=True)
                   await asyncio.sleep(3600)
                   del timers[id]
                   if data[7] == 0:
                      await message.answer(f"@{message.from_user.username} –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É")
                elif data[1] == "RU_moscow":
                   await message.reply(f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–ø–∏–ª(–∞) <b>{randoms}–ª</b>\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ " + str(new_ru_nsw) + f"\n\n<i>—Å–æ–≤–µ—Ç—ã:</i> {ranwor}", parse_mode="html", disable_web_page_preview=True)
                   await asyncio.sleep(3600)
                   del timers[id]
                   if data[7] == 0:
                      await message.answer(f"@{message.from_user.username} –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É")
                elif data[1] == "KZ_almaty":
                   await message.reply(f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–ø–∏–ª(–∞) <b>{randoms}–ª</b>\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ " + str(new_kz_nsw) + f"\n\n<i>—Å–æ–≤–µ—Ç—ã:</i> {ranwor}", parse_mode="html", disable_web_page_preview=True)
                   await asyncio.sleep(3600)
                   del timers[id]
                   if data[7] == 0:
                      await message.answer(f"@{message.from_user.username} –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É")
                else:
                    await message.reply(f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–ø–∏–ª(–∞) <b>{randoms}–ª</b>\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –≤ {real_btime}:{real_time[1]}:{real_time[2]}\n\n<i>—Å–æ–≤–µ—Ç—ã:</i> {ranwor}", parse_mode="html", disable_web_page_preview=True)
                    await asyncio.sleep(3600)
                    del timers[id]
                    if data[7] == 0:
                      await message.answer(f"@{message.from_user.username} –≤—Ä–µ–º—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É")
         else:
                 if data[1] == "UA_kiev":
                       time_format = "%H:%M:%S"
                       ua_now = datetime.now(UA_kiev_tz)
                       time1 = datetime.strptime(data[8], time_format)
                       ua_str = ua_now.strftime(time_format)
                       time2 = datetime.strptime(ua_str, time_format)
                       if time1 < time2:
                          time1 = time1 + timedelta(days=1)
                       time_minus = time1 - time2
                       time_str = str(time_minus)
                       await message.answer("–í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–∏—Ç—å –≤ {}".format(time_str))
                 elif data[1] == "RU_moscow":
                        time_format = "%H:%M:%S"
                        ru_now = datetime.now(RU_moscow_tz)
                        time1 = datetime.strptime(data[8], time_format)
                        ru_str = ru_now.strftime(time_format)
                        time2 = datetime.strptime(ru_str, time_format)
                        if time1 < time2:
                           time1 = time1 + timedelta(days=1)
                        time_minus = time1 - time2
                        time_str = str(time_minus)
                        await message.answer("–í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–∏—Ç—å –≤ {}".format(data[8]))
                 elif data[1] == "KZ_almaty":
                        time_format = "%H:%M:%S"
                        kz_now = datetime.now(KZ_almaty_tz)
                        time1 = datetime.strptime(data[8], time_format)
                        kz_str = kz_now.strftime(time_format)
                        time2 = datetime.strptime(kz_str, time_format)
                        if time1 < time2:
                           time1 = time1 + timedelta(days=1)
                        time_minus = time1 - time2
                        time_str = str(time_minus)
                        await message.answer("–í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–∏—Ç—å –≤ {}.".format(data[8]))
                 else:
                     await message.answer("–í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–∏—Ç—å –≤ {}\n\n–ü–æ—á–µ–º—É –≤—ã –≤—Å—ë –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–µ–æ–Ω?".format(data[8]))
   elif message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         cursor.execute("SELECT num_one, mir_poyas, active, online_up, user_id, date_exit, num_seven, num_two FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (1, id))
         conn.commit()
         await check_db(message)
         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
         if data[7] == 0:
            markup.add("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 1")
         else:
            markup.add("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 0")
         markup.add("–≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
         markup.add("–ù–∞–∑–∞–¥")
         await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name} –≤ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n‚öôÔ∏è–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n   üîî—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data[7]}\n   üïß–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data[1]}", reply_markup=markup)
   elif message.text == "–ù–∞–∑–∞–¥":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await check_db(message)
         if data[0] == 1:
            cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (0, id))
            conn.commit()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('üçª–í—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞')
            markup.add('üìà–¢–æ–ø', 'üß∞–ü–æ–º–æ—â—å', '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üéÆ–ò–≥—Ä—ã', "üìù–°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ")
            if message.chat.id == 1017848661:
               markup.add('‚å®Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏, soon...", reply_markup=markup)
         elif data[0] == 3:
            cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (0, id))
            conn.commit()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('üçª–í—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞')
            markup.add('üìà–¢–æ–ø', 'üß∞–ü–æ–º–æ—â—å', '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üéÆ–ò–≥—Ä—ã', "üìù–°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ")
            if message.chat.id == 1017848661:
              markup.add('‚å®Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏, soon...", reply_markup=markup)
         elif data[0] == 2:
            cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (1, id))
            conn.commit()
            await check_db(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if data[1] == 0:
               markup.add("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 1")
            else:
               markup.add("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 0")
            markup.add("–≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
            markup.add("–ù–∞–∑–∞–¥")
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name} –≤ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n‚öôÔ∏è–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n   üîî—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data[1]}\n   üïß–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data[2]}", reply_markup=markup)
   elif message.text == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 1":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await check_db(message)
         if data[0] == 1:
            if data[1] == 0:
               cursor.execute("UPDATE user_data SET num_two = ? WHERE user_id = ?", (1, id))
               conn.commit()
               await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ 1")
               cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
               data = cursor.fetchone()
               markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
               if data[1] == 0:
                  markup.add("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 1")
               else:
                  markup.add("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 0")
               markup.add("–≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
               markup.add("–ù–∞–∑–∞–¥")
               await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name} –≤ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n‚öôÔ∏è–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n   üîî—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data[1]}\n   üïß–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data[2]}", reply_markup=markup)
   elif message.text == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 0":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await check_db(message)
         if data[0] == 1:
            if data[1] == 1:
               cursor.execute("UPDATE user_data SET num_two = ? WHERE user_id = ?", (0, id))
               conn.commit()
               await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ 0")
               cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
               data = cursor.fetchone()
               markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
               if data[1] == 0:
                  markup.add("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 1")
               else:
                  markup.add("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 0")
               markup.add("–≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
               markup.add("–ù–∞–∑–∞–¥")
               await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name} –≤ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n‚öôÔ∏è–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n   üîî—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data[1]}\n   üïß–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data[2]}", reply_markup=markup)
   elif message.text == "–≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         cursor.execute("SELECT num_seven, mir_poyas FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await check_db(message)
         if data[0] == 1:
            cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (2, id))
            conn.commit()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("UA_kiev", "RU_moscow")
            markup.add("KZ_almaty")
            markup.add("–ù–∞–∑–∞–¥")
            
            await message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å —Å—Ç–æ–∏—Ç\nüïß–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data[1]}\n\n–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ç–æ–∏—Ç Df(Default) —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫: \n üá∫üá¶ UA_kiev(–ö–∏–µ–≤),\n üá∑üá∫ RU_moscow(–ú–æ—Å–∫–≤–∞),\n üá∞üáø KZ_almaty(–ê–ª–º–∞—Ç—ã)", reply_markup=markup)
   elif message.text == "RU_moscow":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await check_db(message)
         if data[0] == 2:
            if data[2] != "RU_moscow":
               cursor.execute("UPDATE user_data SET mir_poyas = ? WHERE user_id = ?", ("RU_moscow", id))
               conn.commit()
               cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
               data = cursor.fetchone()
               markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
               markup.add("UA_kiev", "RU_moscow")
               markup.add("KZ_almaty")
               markup.add("–ù–∞–∑–∞–¥")
               
               await message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å —Å—Ç–æ–∏—Ç\nüïß–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data[2]}\n\n–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ç–æ–∏—Ç Df(Default) —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫: \n üá∫üá¶ UA_kiev(–ö–∏–µ–≤),\n üá∑üá∫ RU_moscow(–ú–æ—Å–∫–≤–∞),\n üá∞üáø KZ_almaty(–ê–ª–º–∞—Ç—ã)\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", reply_markup=markup)
   elif message.text == "UA_kiev":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await check_db(message)
         if data[0] == 2:
            if data[2] != "UA_kiev":
               cursor.execute("UPDATE user_data SET mir_poyas = ? WHERE user_id = ?", ("UA_kiev", id))
               conn.commit()
               cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
               data = cursor.fetchone()
               markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
               markup.add("UA_kiev", "RU_moscow")
               markup.add("KZ_almaty")
               markup.add("–ù–∞–∑–∞–¥")
               
               await message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å —Å—Ç–æ–∏—Ç\nüïß–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data[2]}\n\n–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ç–æ–∏—Ç Df(Default) —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫: \n üá∫üá¶ UA_kiev(–ö–∏–µ–≤),\n üá∑üá∫ RU_moscow(–ú–æ—Å–∫–≤–∞),\n üá∞üáø KZ_almaty(–ê–ª–º–∞—Ç—ã)\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", reply_markup=markup)
   elif message.text == "KZ_almaty":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await check_db(message)
         if data[0] == 2:
            if data[2] != "KZ_almaty":
               cursor.execute("UPDATE user_data SET mir_poyas = ? WHERE user_id = ?", ("KZ_almaty", id))
               conn.commit()
               cursor.execute("SELECT num_seven, num_two, mir_poyas FROM user_data WHERE user_id = ?", (id,))
               data = cursor.fetchone()
               markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
               markup.add("UA_kiev", "RU_moscow")
               markup.add("KZ_almaty")
               markup.add("–ù–∞–∑–∞–¥")
               
               await message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å —Å—Ç–æ–∏—Ç\nüïß–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data[2]}\n\n–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ç–æ–∏—Ç Df(Default) —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫: \n üá∫üá¶ UA_kiev(–ö–∏–µ–≤),\n üá∑üá∫ RU_moscow(–ú–æ—Å–∫–≤–∞),\n üá∞üáø KZ_almaty(–ê–ª–º–∞—Ç—ã)\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", reply_markup=markup)
   elif message.text == "üß∞–ü–æ–º–æ—â—å":
      if message.chat.type == "private":
         await check_db(message)
         markup = types.InlineKeyboardMarkup(row_width=1)
         markup.add(types.InlineKeyboardButton("–∑–∞—á–µ–º –Ω—É–∂–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?", callback_data="mir_poyasq"))
         await message.answer("–¢—É—Ç —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è...\n\n/help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π\n/kvas_up - –≤—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞\n/top_in_group - —Ç–æ–ø –ª–∏—Ç—Ä–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ \n/top - —Ç–æ–ø –≤—Å–µ—Ö –ª—é–¥–µ–π –Ω–∞—á–∏–Ω–∞—è —Å 100–ª.\n\n\n@FJHGGP —Å–ø–∞—Å–∏–±–æ –∑–∞ –∞–≤—É <3", reply_markup=markup)
   elif message.text == "üìà–¢–æ–ø":
      if message.chat.type == "private":
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         first_name_0 = message.from_user.first_name
         
         cursor.execute("SELECT first_name, kvas_up FROM user_data ORDER BY kvas_up DESC")
         data = cursor.fetchall()
         cursor.execute("SELECT first_name, kvas_up FROM user_data WHERE user_id = ?", (id,))
         data_user = cursor.fetchone()
         await check_db(message)
         output = ""
         one_numer = 0
         for record in data:
            first_name, kvas_up = record
            kvas_up_float = float(kvas_up)
            if float(kvas_up) > 99.99:
               one_numer += 1
               if first_name == first_name_0:
                  output += f"<u>{one_numer}. <b>{first_name}</b> - {round(kvas_up_float, 2)}–ª</u>\n"
               else:
                  output += f"{one_numer}. <b>{first_name}</b> - {round(kvas_up_float, 2)}–ª\n"
         await message.answer(f"–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ª—é–¥–µ–π —É –∫–æ–≥–æ –±–æ–ª—å—à–µ 100–ª.\n\n{output}", parse_mode="html")
         cursor.execute("SELECT first_name, kvas_up FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await message.answer(f"–£ –≤–∞—Å: {data[1]}–ª.")
   elif message.text == "üí¨–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º":
      if message.from_user.id == 1017848661:
         if message.chat.type == "private":
            global status
            status = "send"
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º")
   elif message.text.lower() == "–±–æ—Ç":
      await check_db(message)
      await message.answer("‚úÖ –ù–∞ –º–µ—Å—Ç–µ")
   elif message.text == "‚å®Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
      if message.from_user.id == 1017848661:
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
         
         markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
         
         markup.add("üí¨–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", "üóÉÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üìä –û–ø—Ä–æ—Å—ã", "–ù–∞–∑–∞–¥")
         await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=markup)
         cursor.execute("SELECT num_seven FROM user_data WHERE user_id = ?", (id,))
         cub = cursor.fetchone()
         cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (1, id))
         conn.commit()
   elif message.text == "üóÉÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
      if message.from_user.id == 1017848661:
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
            
         cursor.execute("SELECT first_name, last_name, user_name, custom_name, user_id, active, mir_poyas, kvas_up, online_up FROM user_data")
         data = cursor.fetchall()
         output = ""
         for record in data:
            first_name, last_name, user_name, custom_name, user_id, active, mir_poyas, kvas_up, online_up = record
            output += f"–ò–º—è: <b>{first_name}</b>\n–§–∞–º–∏–ª–∏—è: <b>{last_name}</b>\n–Æ–∑–µ—Ä: <b>@{user_name}</b>\n–ü—Å–µ–≤–¥–æ–Ω–∏–º: <b>{custom_name}</b>\n–ê–π–¥–∏: <b>{user_id}</b>\n–ê–∫—Ç–∏–≤: <b>{active}</b>\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{mir_poyas}</b>\n–í—ã–ø–∏—Ç–æ –∫–≤–∞—Å–∞: <b>{kvas_up}</b>\n–û–Ω–ª–∞–π–Ω: <b>{online_up}</b>—á.\n\n"
         await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{}".format(output), parse_mode="html")
   elif message.text == "üìä –û–ø—Ä–æ—Å—ã":
      if message.from_user.id == 1017848661:
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         id = message.from_user.id
            
         cursor.execute("SELECT active, user_id, num_six FROM user_data")
         data = cursor.fetchall()
         cursor.execute("SELECT chat FROM chat_id WHERE id =  ?", (0,))
         data_chat = cursor.fetchone()
         await message.answer("{}".format(data[0]))
         print(data[0][1])
         chat_id = data[0][1]
         for user_data in data:
            try:
               active, user_id, num_six = user_data
               if active == 1:
                  await bot.send_poll(
                  chat_id = user_id,
                  question="–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                  options=["–ù–µ –æ–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞–º–∏", "–°—É–ø–µ—Ä", "–û—Ç–ª–∏—á–Ω–æ", "–ú–æ–≥–ª–æ –±—ã—Ç—å –∏ —Ö—É–∂–µ", "—Ç–∞–∫ —Å–µ–±–µ", "—É–∂–∞—Å–Ω–æ"],
                  is_anonymous = False
                  )
               else:
                  await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π".format(user_id))
            except Exception as e:
               cursor.execute("UPDATE user_data SET active = ? WHERE user_id = ?", (0, user_id))
               conn.commit()
               await message.answer(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}\n\n–û—à–∏–±–∫–∞: {e}")
         chat_ids = data_chat[0].split(", ")
         print(chat_ids)
         for chat in chat_ids:
             try:
                await message.answer(chat)
                await bot.send_poll(
                  chat_id = chat,
                  question="–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                  options=["–ù–µ –æ–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞–º–∏", "–°—É–ø–µ—Ä", "–û—Ç–ª–∏—á–Ω–æ", "–ú–æ–≥–ª–æ –±—ã—Ç—å –∏ —Ö—É–∂–µ", "–¢–∞–∫ —Å–µ–±–µ", "–£–∂–∞—Å–Ω–æ", "–•–æ—á—É —Å—Ç–µ—Ä–µ—Ç—å —ç—Ç–æ—Ç –∂–∞–ª–∫–∏–π –º–∏—Ä–æ–∫"],
                  is_anonymous = False
                  )
             except Exception as e:
                await message.answer(f"–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –µ–≥–æ –æ—Ç—Ç—É–¥–∞\n–û—à–∏–±–∫–∞: {e}")
   elif message.from_user.id == 1017848661:
         if status == "send":
            if message.chat.type == "private":
               global chaty
               conn = sqlite3.connect('testing2.db')
               cursor = conn.cursor()
               id = message.from_user.id
               msg = message.text
               
               cursor.execute("SELECT active, user_id, num_six FROM user_data")
               data = cursor.fetchall()
               cursor.execute("SELECT chat FROM chat_id WHERE id = ?", (0,))
               data_chat = cursor.fetchone()
               chat_id = data[0][2]
               status = "None"
               for user_data in data:
                  try:
                     active, user_id, num_six = user_data
                     if active == 1:
                        await bot.send_message(user_id, "{}".format(msg))
                     else:
                        await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π".format(user_id))
                  except Exception as e:
                     cursor.execute("UPDATE user_data SET active = ? WHERE user_id = ?", (0, user_id))
                     conn.commit()
                     await message.answer(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}\n\n–û—à–∏–±–∫–∞: {e}")
                     
               chat_ids = data_chat[0].split(", ")
               for chat in chat_ids:
                  try:
                     await message.answer(chat)
                     await bot.send_message(chat, "{}".format(msg))
                  except Exception as e:
                     await message.answer(f"–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –µ–≥–æ –æ—Ç—Ç—É–¥–∞\n–û—à–∏–±–∫–∞: {e}")
   if message.text == "–ø—Ä–æ–º–æ #–Ω–æ–≤—ã–π_–∫–≤–∞—Å_–Ω–∞_—á–∞—Å":
            await check_db(message)
            conn = sqlite3.connect('testing2.db')
            cursor = conn.cursor()
            id = message.from_user.id
               
            cursor.execute("SELECT num_tree, kvas_up FROM user_data WHERE user_id = ?", (id,))
            data = cursor.fetchone()
            if data[0] == 0:
               cursor.execute("UPDATE user_data SET num_tree = ?, kvas_up = kvas_up + ? WHERE user_id = ?", (1, 15.0, id))
               conn.commit()
               await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –≤–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>15.0–ª.</b>", parse_mode="html")
            else:
               await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ")
   elif message.text == "üìù–°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ":
       if message.chat.type == "private":
           await check_db(message)
           conn = sqlite3.connect('testing2.db')
           cursor = conn.cursor()
           id = message.from_user.id
               
           cursor.execute("SELECT num_seven, first_name, user_name, user_id FROM user_data WHERE user_id = ?", (id,))
           data = cursor.fetchone()
           await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –æ—à–∏–±–∫—É, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏,  —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–π–¥—ë—Ç –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ –≤–∞–º –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ –ø–æ–º–æ—â—å, –µ—Å–ª–∏ –ø–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ —Å—é–¥–∞ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
           cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (3, id))
           conn.commit()
   elif message.chat.type == "private":
        await check_db(message)
        conn = sqlite3.connect('testing2.db')
        cursor = conn.cursor()
        id = message.from_user.id
               
        cursor.execute("SELECT num_seven, first_name, user_name, user_id FROM user_data WHERE user_id = ?", (id,))
        data = cursor.fetchone()
        if data[0] == 3:
            if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
               cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (0, id))
               conn.commit()
               markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
               markup.add('üçª–í—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞')
               markup.add('üìà–¢–æ–ø', 'üß∞–ü–æ–º–æ—â—å', '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üéÆ–ò–≥—Ä—ã', "üìù–°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ")
               if message.chat.id == 1017848661:
                  markup.add('‚å®Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
               await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏, soon...", reply_markup=markup)
            else:
               msg = message.text
               ua_new = datetime.now(UA_kiev_tz)
               format_ua = ua_new.strftime("%H:%M:%S")
               await bot.send_message(1017848661, f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data[1]}\n–Æ–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{data[2]}\n–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data[3]}\nINFO: {msg}\nTime: " + str(format_ua))
               cursor.execute("UPDATE user_data SET num_seven = ? WHERE user_id = ?", (0, id))
               conn.commit()
               await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–æ–±—â–∏–ª–∏ –æ –æ—à–∏–±–∫–µ, –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
   if message.text ==  "üéÆ–ò–≥—Ä—ã":
      if message.chat.type == "private":
         markup = types.InlineKeyboardMarkup(row_width=3)
         
         markup.add(types.InlineKeyboardButton("ü•É3 —Å—Ç–∞–∫–∞–Ω–∞", callback_data="stakan"), types.InlineKeyboardButton("ü™®‚úÇÔ∏èüßª", callback_data="kamnojby"))
         await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üéÆ–ò–≥—Ä—ã'\n–ò–≥—Ä—ã: ü•É3 —Å—Ç–∞–∫–∞–Ω–∞, ü™®‚úÇÔ∏èüßª", reply_markup=markup)
   elif message.chat.type == "private":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = message.from_user.id
      msg = message.text
      cursor.execute("SELECT cabimet, kvas_up FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      if data[0] == "stakan":
         if float(msg) < 1.00:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∏–∂–µ 1-–≥–æ –ª–∏—Ç—Ä–∞")
         elif float(msg) >= float(data[1]):
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—Ç—Ä–æ–≤")
         else:
            cursor.execute("UPDATE user_data SET stavka1 = ? WHERE user_id = ?", (float(msg), id))
            conn.commit()
            markup = types.InlineKeyboardMarkup(row_width=3)
            
            stk = types.InlineKeyboardButton("ü•É", callback_data="vubor_stakan")
            
            markup.add(stk, stk, stk)
            print(f"{data[0]}")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞–∫–∞–Ω–æ–≤", reply_markup=markup)
            cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
            conn.commit()
   elif message.text.lower() == "–ª":
      if message.chat.type in ["group", "supergroup"]:
         await check_db(message)
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         
         id = message.from_user.id
         msg = message.text
         cursor.execute("SELECT kvas_up FROM user_data WHERE user_id = ?", (id,))
         data = cursor.fetchone()
         await message.answer(f"{round(data[0], 2)}")
   elif message.text.lower() == "–∫—Ç–æ —ç—Ç–æ":
      await check_db(message)
      if not message.reply_to_message:
         await message.reply("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      else:
         conn = sqlite3.connect('testing2.db')
         cursor = conn.cursor()
         reply_id = message.reply_to_message.from_user.id
         cursor.execute("SELECT first_name, last_name, user_name, custom_name, user_id, kvas_up FROM user_data WHERE user_id = ?", (reply_id,))
         data_reply = cursor.fetchone()
         if reply_id == 1017848661:
            await message.reply("–ò–º—è: {}\n–§–∞–º–∏–ª–∏—è: {}\nüåê–Æ–∑–µ—Ä: {}\n–ü—Å–µ–≤–¥–æ–Ω–∏–º: <b>DEV</b>\nüÜî–ê–π–¥–∏: {}\nüç∫–í—ã–ø–∏—Ç–æ –ª–∏—Ç—Ä–æ–≤: {}".format(data_reply[0], data_reply[1], data_reply[2], data_reply[4], round(data_reply[5], 2)), parse_mode="html")
         else:
            await message.reply("–ò–º—è: {}\n–§–∞–º–∏–ª–∏—è: {}\nüåê–Æ–∑–µ—Ä: {}\n–ü—Å–µ–≤–¥–æ–Ω–∏–º: (—Å–∫–æ—Ä–æ)\nüÜî–ê–π–¥–∏: {}\nüç∫–í—ã–ø–∏—Ç–æ –ª–∏—Ç—Ä–æ–≤: {}".format(data_reply[0], data_reply[1], data_reply[2], data_reply[4], round(data_reply[5], 2)))
   if message.chat.type == "private":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = message.from_user.id
      cursor.execute("SELECT cabimet, kvas_up, stavka1 FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      msg = message.text
      if data[0] == "kamnojbystavka":
         if float(msg) >= 1:
            if float(msg) <= float(data[1]):
               cursor.execute("UPDATE user_data SET stavka1 = ? WHERE user_id = ?", (msg, id))
               conn.commit()
               markup = types.InlineKeyboardMarkup()
               markup.add(types.InlineKeyboardButton("ü™®", callback_data="stone"), types.InlineKeyboardButton("‚úÇÔ∏è", callback_data="nojnicu"), types.InlineKeyboardButton("üßª", callback_data="bymaga"))
               markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
               await message.answer("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: \nü§ñ–ë–æ—Ç: ", reply_markup=markup)
               cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("kamnojbygame", id))
               conn.commit()
            else:
               await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞")
         else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∏–∂–µ 1-–≥–æ –ª–∏—Ç—Ä–∞")

@dp.callback_query_handler(lambda call: True)
async def calling(call: types.CallbackQuery):
   if call.data == "mir_poyasq":
      if call.message.chat.type == "private" or "group" or "supergroup":
         markup = types.InlineKeyboardMarkup(row_width=1)
         markup.add(types.InlineKeyboardButton("‚Üê", callback_data="back"))
         await call.message.edit_text("<b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?</b>\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –µ—Å–ª–∏ –∂–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –±—É–¥–µ—Ç —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º Df(Default) —Ç–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–≤–ø–æ–¥–∞—Ç—å —Å –≤–∞—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º",parse_mode="html",  reply_markup=markup)
   elif call.data == "back":
      if call.message.chat.type == "private" or "group" or "supergroup":
         markup = types.InlineKeyboardMarkup(row_width=1)
         markup.add(types.InlineKeyboardButton("–∑–∞—á–µ–º –Ω—É–∂–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?", callback_data="mir_poyasq"))
         await call.message.edit_text("–¢—É—Ç —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è...\n\n/help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π\n/kvas_up - –≤—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞\n/top_in_group - —Ç–æ–ø –ª–∏—Ç—Ä–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ \n/top - —Ç–æ–ø –≤—Å–µ—Ö –ª—é–¥–µ–π –Ω–∞—á–∏–Ω–∞—è —Å 100–ª.\n", reply_markup=markup)
   elif call.data == "stakan":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = call.from_user.id
      cursor.execute("SELECT cabimet FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      await call.message.answer("–ü—Ä–µ–∂–¥–µ —á–µ–º –∏–≥—Ä–∞—Ç—å –≤ —Å—Ç–∞–∫–∞–Ω –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É, —Å—Ç–∞–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –ª–∏—Ç—Ä–∞")
      cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("stakan", id))
      conn.commit()
   elif call.data == "vubor_stakan":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = call.from_user.id
      cursor.execute("SELECT cabimet, stavka1, kvas_up FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      await call.message.delete()
      stkan = random.randint(1, 3)
      if stkan == 1:
         priz = random.randint(3, 5)
         v_priz = data[1] * priz
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up + ? WHERE user_id = ?", (priz, id))
         conn.commit()
         markup = types.InlineKeyboardMarkup()
         markup.add(types.InlineKeyboardButton("–ò—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É —Å–Ω–æ–≤–∞", callback_data="stakan"))
         await call.message.answer("‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ {}—Ö\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ —Å–æ–≤–µ—Ç—É—é –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º".format(priz), reply_markup=markup)
         cursor.execute("UPDATE user_data SET stavka1 = ? WHERE user_id = ?", (0, id))
         conn.commit()
      elif stkan == 2:
         cursor.execute("UPDATE user_data SET stavka1 = ? WHERE user_id = ?", (0, id))
         conn.commit()
         await call.message.answer("0Ô∏è‚É£–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –Ω—É–ª–µ\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ —Å–æ–≤–µ—Ç—É—é –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º")
      else:
         priz = random.randint(1, 2)
         if int(priz) == 1:
            priz = 1.5
            v_priz = data[1] * 1.5
         else:
            v_priz = data[1] * priz
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up - ? WHERE user_id = ?", (v_priz, id))
         conn.commit()
         await call.message.answer("‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –≤ {}—Ö\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è".format(priz))
         cursor.execute("UPDATE user_data SET stavka1 = ? WHERE user_id = ?", (0, id))
         conn.commit()
   elif call.data == "kamnojby":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = call.from_user.id
      cursor.execute("SELECT game_online_kam FROM user_data")
      data = cursor.fetchall()
      
      markup = types.InlineKeyboardMarkup(row_width=1)
      markup.add(types.InlineKeyboardButton("PvB", callback_data="PvB"))
      
      online_game = 0
      for online in data:
         game_online_kam = online
         if game_online_kam == 1:
            online_game += 1
      
      await call.message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É: <b>ü™®–ö–∞–º–µ–Ω—å ‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã üßª–ë—É–º–∞–≥–∞</b>, –Ω–∞–¥–µ—é—Å—å –ø—Ä–∞–≤–∏–ª–∞ –≤—ã –∑–Ω–∞–µ—Ç–µ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å\n<b>------------</b>\n1 —Ä–µ–∂–∏–º ü§ñPvB(player vs bot), –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º\n<b>------------</b>\n\n‚ÄºÔ∏è<b>–≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É</b>, –Ω–æ —É—á—Ç–∏—Ç–µ —á—Ç–æ <b>–µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã —Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ 1 –ª–∏—Ç—Ä</b>\n\n–í—ã–±–µ—Ä–∞–π—Ç–µ –∏ —Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞–≤–∫—É!\n\n<b>–í–µ—Å–µ–ª–∏—Ç–µ—Å—å!</b>\n\n–ò–≥—Ä–æ–∫–∏ –∂–¥—É—â–∏—Ö –∏–≥—Ä: <b>{online_game}</b>", parse_mode="html", reply_markup=markup)
   elif call.data == "PvB":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = call.from_user.id
      cursor.execute("SELECT cabimet, stavka1, kvas_up FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("kamnojbystavka", id))
      conn.commit()
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
      await call.message.answer("–ü—Ä–µ–∂–¥–µ —á–µ–º –∏–≥—Ä–∞—Ç—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞–≤–∫—É, —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –Ω–∏–∂–µ 1-–≥–æ –ª–∏—Ç—Ä–∞, —É—á—Ç–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞—Ç—Å—è –æ—Ç –∏–≥—Ä—ã –Ω–æ –≤–∞–º —Å–Ω–∏–º—É—Ç 1 –ª–∏—Ç—Ä —Å –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞", reply_markup=markup)
   elif call.data == "stone":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = call.from_user.id
      cursor.execute("SELECT cabimet, stavka1, kvas_up FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      kamnojby = random.choice(["ü™®", "‚úÇÔ∏è", "üßª"])
      await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: ü™®\nü§ñ–ë–æ—Ç: ")
      
      if kamnojby == "ü™®":
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: ü™®\nü§ñ–ë–æ—Ç: ü™®")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()
      elif kamnojby == "‚úÇÔ∏è":
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: ü™®\nü§ñ–ë–æ—Ç: ‚úÇÔ∏è")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         minus_stvka = data[1] * 2
         
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up + ? WHERE user_id = ?", (minus_stvka, id))
         conn.commit()
         
         await call.message.answer("‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ 2—Ö\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ —Å–æ–≤–µ—Ç—É—é –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º")
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()
      else:
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: ü™®\nü§ñ–ë–æ—Ç: üßªÔ∏è")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         minus_stvka = data[1] * 2
         
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up - ? WHERE user_id = ?", (minus_stvka, id))
         conn.commit()
         
         await call.message.answer("‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –≤ 2—Ö\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è")
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()

   elif call.data == "nojnicu":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = call.from_user.id
      cursor.execute("SELECT cabimet, stavka1, kvas_up FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      kamnojby = random.choice(["ü™®", "‚úÇÔ∏è", "üßª"])
      await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: ‚úÇÔ∏è\nü§ñ–ë–æ—Ç: ")
      
      if kamnojby == "‚úÇÔ∏è":
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: ‚úÇÔ∏è\nü§ñ–ë–æ—Ç: ‚úÇÔ∏è")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()
      elif kamnojby == "ü™®":
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: ‚úÇÔ∏è\nü§ñ–ë–æ—Ç: ü™®")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         minus_stvka = data[1] * 2
         
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up - ? WHERE user_id = ?", (minus_stvka, id))
         conn.commit()
         await call.message.answer("‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –≤ 2—Ö\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è")
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()
      else:
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: ‚úÇÔ∏è\nü§ñ–ë–æ—Ç: üßªÔ∏è")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         minus_stvka = data[1] * 2
         
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up + ? WHERE user_id = ?", (minus_stvka, id))
         conn.commit()
         
         await call.message.answer("‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ 2—Ö\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ —Å–æ–≤–µ—Ç—É—é –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º")
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()

   elif call.data == "bymaga":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = call.from_user.id
      cursor.execute("SELECT cabimet, stavka1, kvas_up FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      kamnojby = random.choice(["ü™®", "‚úÇÔ∏è", "üßª"])
      await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: üßª\nü§ñ–ë–æ—Ç: ")
      
      if kamnojby == "üßª":
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: üßª\nü§ñ–ë–æ—Ç: üßªÔ∏è")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()
      elif kamnojby == "ü™®":
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: üßª\nü§ñ–ë–æ—Ç: ü™®")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         minus_stvka = data[1] * 2
         
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up + ? WHERE user_id = ?", (minus_stvka, id))
         conn.commit()
         await call.message.answer("‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ 2—Ö\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ —Å–æ–≤–µ—Ç—É—é –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º")
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()
      else:
         await asyncio.sleep(1)
         await call.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\nüßç–í—ã: üßª\nü§ñ–ë–æ—Ç: ‚úÇÔ∏èÔ∏è")
         await asyncio.sleep(1)
         
         markup = types.InlineKeyboardMarkup()
         
         markup.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="PvB"))
         
         await call.message.answer("–í–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤ —Å–ª–µ–¥—É—â–∏–π —Ä–∞–∑ –≤–∞–º –º–æ–∂–µ—Ç –Ω–µ –ø–æ–≤–µ–∑—Ç–∏...", reply_markup=markup)
         
         minus_stvka = data[1] * 2
         
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up - ? WHERE user_id = ?", (minus_stvka, id))
         conn.commit()
         
         await call.message.answer("‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –≤ 2—Ö\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è")
         
         cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
         conn.commit()

   elif call.data == "cancel":
      conn = sqlite3.connect('testing2.db')
      cursor = conn.cursor()
      
      id = call.from_user.id
      cursor.execute("SELECT cabimet, stavka1, kvas_up FROM user_data WHERE user_id = ?", (id,))
      data = cursor.fetchone()
      
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      markup.add('üçª–í—ã–ø–∏—Ç—å –∫–≤–∞—Å–∞')
      markup.add('üìà–¢–æ–ø', 'üß∞–ü–æ–º–æ—â—å', '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üéÆ–ò–≥—Ä—ã', "üìù–°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ")
      if call.message.chat.id == 1017848661:
         markup.add('‚å®Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
      await call.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏, soon...", reply_markup=markup)
      
      if data[0] == "kamnojbygame":
         cursor.execute("UPDATE user_data SET kvas_up = kvas_up - ? WHERE user_id = ?", (1, id))
         conn.commit()
         await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–≥—Ä—É, –∑–∞ —ç—Ç–æ –≤–∞–º –±—ã–ª–æ —Å–Ω—è—Ç–æ 1 –ª–∏—Ç—Ä, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–º–µ–Ω—è—Ç—å –∏–≥—Ä—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
      
      cursor.execute("UPDATE user_data SET cabimet = ? WHERE user_id = ?", ("None", id))
      conn.commit()

#keep_alive_live()
executor.start_polling(dp)
